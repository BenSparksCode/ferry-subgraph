// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NFTMinted extends ethereum.Event {
  get params(): NFTMinted__Params {
    return new NFTMinted__Params(this);
  }
}

export class NFTMinted__Params {
  _event: NFTMinted;

  constructor(event: NFTMinted) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NFTNumberGenerated extends ethereum.Event {
  get params(): NFTNumberGenerated__Params {
    return new NFTNumberGenerated__Params(this);
  }
}

export class NFTNumberGenerated__Params {
  _event: NFTNumberGenerated;

  constructor(event: NFTNumberGenerated) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get randomNumber(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SubscriptionPaid extends ethereum.Event {
  get params(): SubscriptionPaid__Params {
    return new SubscriptionPaid__Params(this);
  }
}

export class SubscriptionPaid__Params {
  _event: SubscriptionPaid;

  constructor(event: SubscriptionPaid) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Ferry__getAccountNFTResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Ferry extends ethereum.SmartContract {
  static bind(address: Address): Ferry {
    return new Ferry("Ferry", address);
  }

  YEAR(): BigInt {
    let result = super.call("YEAR", "YEAR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_YEAR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("YEAR", "YEAR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  annualFee(): BigInt {
    let result = super.call("annualFee", "annualFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_annualFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("annualFee", "annualFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  daiAddress(): Address {
    let result = super.call("daiAddress", "daiAddress():(address)", []);

    return result[0].toAddress();
  }

  try_daiAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("daiAddress", "daiAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAccountNFT(_account: Address): Ferry__getAccountNFTResult {
    let result = super.call(
      "getAccountNFT",
      "getAccountNFT(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_account)]
    );

    return new Ferry__getAccountNFTResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getAccountNFT(
    _account: Address
  ): ethereum.CallResult<Ferry__getAccountNFTResult> {
    let result = super.tryCall(
      "getAccountNFT",
      "getAccountNFT(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Ferry__getAccountNFTResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getMembershipExpiryTime(_account: Address): BigInt {
    let result = super.call(
      "getMembershipExpiryTime",
      "getMembershipExpiryTime(address):(uint256)",
      [ethereum.Value.fromAddress(_account)]
    );

    return result[0].toBigInt();
  }

  try_getMembershipExpiryTime(_account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMembershipExpiryTime",
      "getMembershipExpiryTime(address):(uint256)",
      [ethereum.Value.fromAddress(_account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxMembershipPeriod(): BigInt {
    let result = super.call(
      "maxMembershipPeriod",
      "maxMembershipPeriod():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxMembershipPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxMembershipPeriod",
      "maxMembershipPeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxMintedNFTs(): BigInt {
    let result = super.call("maxMintedNFTs", "maxMintedNFTs():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxMintedNFTs(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxMintedNFTs",
      "maxMintedNFTs():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minterAddress(): Address {
    let result = super.call("minterAddress", "minterAddress():(address)", []);

    return result[0].toAddress();
  }

  try_minterAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "minterAddress",
      "minterAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nftCount(): BigInt {
    let result = super.call("nftCount", "nftCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nftCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nftCount", "nftCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nftThresholdPayment(): BigInt {
    let result = super.call(
      "nftThresholdPayment",
      "nftThresholdPayment():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_nftThresholdPayment(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nftThresholdPayment",
      "nftThresholdPayment():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nftsActive(): boolean {
    let result = super.call("nftsActive", "nftsActive():(bool)", []);

    return result[0].toBoolean();
  }

  try_nftsActive(): ethereum.CallResult<boolean> {
    let result = super.tryCall("nftsActive", "nftsActive():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _annualFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _maxMintedNFTs(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _nftThreshold(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _maxMembershipPeriod(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _dai(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _lendingPool(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _nftMinter(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DepositInAaveCall extends ethereum.Call {
  get inputs(): DepositInAaveCall__Inputs {
    return new DepositInAaveCall__Inputs(this);
  }

  get outputs(): DepositInAaveCall__Outputs {
    return new DepositInAaveCall__Outputs(this);
  }
}

export class DepositInAaveCall__Inputs {
  _call: DepositInAaveCall;

  constructor(call: DepositInAaveCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositInAaveCall__Outputs {
  _call: DepositInAaveCall;

  constructor(call: DepositInAaveCall) {
    this._call = call;
  }
}

export class MintNFTCall extends ethereum.Call {
  get inputs(): MintNFTCall__Inputs {
    return new MintNFTCall__Inputs(this);
  }

  get outputs(): MintNFTCall__Outputs {
    return new MintNFTCall__Outputs(this);
  }
}

export class MintNFTCall__Inputs {
  _call: MintNFTCall;

  constructor(call: MintNFTCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class MintNFTCall__Outputs {
  _call: MintNFTCall;

  constructor(call: MintNFTCall) {
    this._call = call;
  }
}

export class NftCreatedCallbackCall extends ethereum.Call {
  get inputs(): NftCreatedCallbackCall__Inputs {
    return new NftCreatedCallbackCall__Inputs(this);
  }

  get outputs(): NftCreatedCallbackCall__Outputs {
    return new NftCreatedCallbackCall__Outputs(this);
  }
}

export class NftCreatedCallbackCall__Inputs {
  _call: NftCreatedCallbackCall;

  constructor(call: NftCreatedCallbackCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _randomNum(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class NftCreatedCallbackCall__Outputs {
  _call: NftCreatedCallbackCall;

  constructor(call: NftCreatedCallbackCall) {
    this._call = call;
  }
}

export class PaySubscriptionCall extends ethereum.Call {
  get inputs(): PaySubscriptionCall__Inputs {
    return new PaySubscriptionCall__Inputs(this);
  }

  get outputs(): PaySubscriptionCall__Outputs {
    return new PaySubscriptionCall__Outputs(this);
  }
}

export class PaySubscriptionCall__Inputs {
  _call: PaySubscriptionCall;

  constructor(call: PaySubscriptionCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PaySubscriptionCall__Outputs {
  _call: PaySubscriptionCall;

  constructor(call: PaySubscriptionCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAnnualFeeCall extends ethereum.Call {
  get inputs(): SetAnnualFeeCall__Inputs {
    return new SetAnnualFeeCall__Inputs(this);
  }

  get outputs(): SetAnnualFeeCall__Outputs {
    return new SetAnnualFeeCall__Outputs(this);
  }
}

export class SetAnnualFeeCall__Inputs {
  _call: SetAnnualFeeCall;

  constructor(call: SetAnnualFeeCall) {
    this._call = call;
  }

  get _annualFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetAnnualFeeCall__Outputs {
  _call: SetAnnualFeeCall;

  constructor(call: SetAnnualFeeCall) {
    this._call = call;
  }
}

export class SetLendingPoolCall extends ethereum.Call {
  get inputs(): SetLendingPoolCall__Inputs {
    return new SetLendingPoolCall__Inputs(this);
  }

  get outputs(): SetLendingPoolCall__Outputs {
    return new SetLendingPoolCall__Outputs(this);
  }
}

export class SetLendingPoolCall__Inputs {
  _call: SetLendingPoolCall;

  constructor(call: SetLendingPoolCall) {
    this._call = call;
  }

  get _lendingPool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLendingPoolCall__Outputs {
  _call: SetLendingPoolCall;

  constructor(call: SetLendingPoolCall) {
    this._call = call;
  }
}

export class SetMaxMembershipPeriodCall extends ethereum.Call {
  get inputs(): SetMaxMembershipPeriodCall__Inputs {
    return new SetMaxMembershipPeriodCall__Inputs(this);
  }

  get outputs(): SetMaxMembershipPeriodCall__Outputs {
    return new SetMaxMembershipPeriodCall__Outputs(this);
  }
}

export class SetMaxMembershipPeriodCall__Inputs {
  _call: SetMaxMembershipPeriodCall;

  constructor(call: SetMaxMembershipPeriodCall) {
    this._call = call;
  }

  get _maxPeriod(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxMembershipPeriodCall__Outputs {
  _call: SetMaxMembershipPeriodCall;

  constructor(call: SetMaxMembershipPeriodCall) {
    this._call = call;
  }
}

export class SetMaxMintedNFTsCall extends ethereum.Call {
  get inputs(): SetMaxMintedNFTsCall__Inputs {
    return new SetMaxMintedNFTsCall__Inputs(this);
  }

  get outputs(): SetMaxMintedNFTsCall__Outputs {
    return new SetMaxMintedNFTsCall__Outputs(this);
  }
}

export class SetMaxMintedNFTsCall__Inputs {
  _call: SetMaxMintedNFTsCall;

  constructor(call: SetMaxMintedNFTsCall) {
    this._call = call;
  }

  get _max(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxMintedNFTsCall__Outputs {
  _call: SetMaxMintedNFTsCall;

  constructor(call: SetMaxMintedNFTsCall) {
    this._call = call;
  }
}

export class SetNFTMinterCall extends ethereum.Call {
  get inputs(): SetNFTMinterCall__Inputs {
    return new SetNFTMinterCall__Inputs(this);
  }

  get outputs(): SetNFTMinterCall__Outputs {
    return new SetNFTMinterCall__Outputs(this);
  }
}

export class SetNFTMinterCall__Inputs {
  _call: SetNFTMinterCall;

  constructor(call: SetNFTMinterCall) {
    this._call = call;
  }

  get _minter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _nftsActive(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetNFTMinterCall__Outputs {
  _call: SetNFTMinterCall;

  constructor(call: SetNFTMinterCall) {
    this._call = call;
  }
}

export class SetNftThresholdPaymentCall extends ethereum.Call {
  get inputs(): SetNftThresholdPaymentCall__Inputs {
    return new SetNftThresholdPaymentCall__Inputs(this);
  }

  get outputs(): SetNftThresholdPaymentCall__Outputs {
    return new SetNftThresholdPaymentCall__Outputs(this);
  }
}

export class SetNftThresholdPaymentCall__Inputs {
  _call: SetNftThresholdPaymentCall;

  constructor(call: SetNftThresholdPaymentCall) {
    this._call = call;
  }

  get _threshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetNftThresholdPaymentCall__Outputs {
  _call: SetNftThresholdPaymentCall;

  constructor(call: SetNftThresholdPaymentCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateNFTDataCall extends ethereum.Call {
  get inputs(): UpdateNFTDataCall__Inputs {
    return new UpdateNFTDataCall__Inputs(this);
  }

  get outputs(): UpdateNFTDataCall__Outputs {
    return new UpdateNFTDataCall__Outputs(this);
  }
}

export class UpdateNFTDataCall__Inputs {
  _call: UpdateNFTDataCall;

  constructor(call: UpdateNFTDataCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenID(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateNFTDataCall__Outputs {
  _call: UpdateNFTDataCall;

  constructor(call: UpdateNFTDataCall) {
    this._call = call;
  }
}

export class WithdrawDAICall extends ethereum.Call {
  get inputs(): WithdrawDAICall__Inputs {
    return new WithdrawDAICall__Inputs(this);
  }

  get outputs(): WithdrawDAICall__Outputs {
    return new WithdrawDAICall__Outputs(this);
  }
}

export class WithdrawDAICall__Inputs {
  _call: WithdrawDAICall;

  constructor(call: WithdrawDAICall) {
    this._call = call;
  }
}

export class WithdrawDAICall__Outputs {
  _call: WithdrawDAICall;

  constructor(call: WithdrawDAICall) {
    this._call = call;
  }
}

export class WithdrawFromAaveCall extends ethereum.Call {
  get inputs(): WithdrawFromAaveCall__Inputs {
    return new WithdrawFromAaveCall__Inputs(this);
  }

  get outputs(): WithdrawFromAaveCall__Outputs {
    return new WithdrawFromAaveCall__Outputs(this);
  }
}

export class WithdrawFromAaveCall__Inputs {
  _call: WithdrawFromAaveCall;

  constructor(call: WithdrawFromAaveCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawFromAaveCall__Outputs {
  _call: WithdrawFromAaveCall;

  constructor(call: WithdrawFromAaveCall) {
    this._call = call;
  }
}
